{"version":3,"sources":["containers/LoginPage/app_image.png","utils/redux/reducer.js","containers/LoginPage/constants.js","utils/checkStore.js","utils/constants.js","utils/sagaInjectors.js","utils/injectSaga.js","utils/reducerInjectors.js","utils/injectReducer.js","utils/request.js","containers/LoginPage/actions.js","containers/LoginPage/saga.js","containers/LoginPage/reducer.js","components/Square/index.js","containers/AuthSecondStep/index.js","containers/LoginPage/selector.js","containers/LoginPage/index.js","utils/mapDispatchToProps.js"],"names":["module","exports","baseReducer","draft","action","initialState","actionList","type","FETCH","CALL","isProgress","errors","item","SUCCESS","data","FAIL","actionCreator","name","containerName","LOGIN_ACTIONS","baseActions","checkStore","store","shape","dispatch","isFunction","subscribe","getState","replaceReducer","runSaga","injectedReducers","isObject","injectedSagas","invariant","conformsTo","DAEMON","allowedModes","checkKey","key","isString","isEmpty","checkDescriptor","descriptor","saga","mode","includes","injectSagaFactory","isValid","args","newDescriptor","hasSaga","Reflect","has","task","ejectSagaFactory","cancel","getInjectors","injectSaga","ejectSaga","injectReducerFactory","reducer","createReducer","injectReducer","request","url","options","Promise","resolve","reject","fetch","then","res","json","response","catch","Error","loginSuccessAction","user","AUTH","authAction","LOGIN","loginSaga","postPlates","authSaga","requestURL","method","body","JSON","stringify","call","squares","put","console","log","plate","takeEvery","SELECT_PLATE","Object","assign","list","total","page","count","id","selectedSquare","isAuth","togglePlates","index","indexOf","concat","splice","state","produce","useStyles","makeStyles","background","color","width","height","opacity","isSelect","number","fontSize","textAlign","Square","props","useState","setIsSelect","classes","Grid","container","direction","justify","className","onClick","onSelectPlate","square","maxWidth","margin","block","position","borderRadius","button","marginTop","lineHeight","padding","withRouter","map","Button","selectLoginDomain","inputContainer","inputContainerText","fontWeight","marginBottom","input","image","display","bottom","right","border","borderBottom","borderRight","mapStateToProps","createStructuredSelector","createSelector","substate","selectedSquares","withConnect","connect","withSaga","WrappedComponent","InjectSaga","context","injectors","this","Component","contextType","ReactReduxContext","displayNode","displayName","hoistNonReactStatics","withReducer","ReducerInjector","React","compose","inputValue","setInputValue","length","selectPlate","lg","md","alignItems","TextField","variant","onChange","e","target","value","label","src","appImage"],"mappings":"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","file":"static/js/6.c236c790.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/app_image.c25636b9.png\";","export const baseRoute = ({ draft, action, initialState, actionList }) => {\r\n    switch(action.type) {\r\n        case actionList.FETCH.CALL: \r\n            draft.inProgress = true;\r\n            draft.errors = {};\r\n            break;\r\n        case actionList.FETCH.SUCCESS: \r\n            draft.inProgress = false;\r\n            draft.errors = {};\r\n            break;\r\n        case actionList.FETCH.FAIL:\r\n            draft.inProgress = false;\r\n            draft.errors = {};\r\n            break;\r\n    }\r\n}\r\n\r\nexport const baseState = {\r\n    isProgress: false,\r\n    list: {\r\n        total: 0,\r\n        page: 0,\r\n        count: 0,\r\n        data: [],\r\n    },\r\n    errors: {},\r\n    item: {\r\n        id: '',\r\n    },\r\n};\r\n  \r\nexport const baseReducer = ({ draft, action, initialState, actionList }) => {\r\n    switch (action.type) {\r\n        case actionList.FETCH.CALL:\r\n            draft.isProgress = true;\r\n            draft.errors = {};\r\n            draft.item = initialState.item;\r\n        break;\r\n        case actionList.FETCH.SUCCESS:\r\n            draft.isProgress = false;\r\n            draft.errors = {};\r\n            draft.item = action.data;\r\n            break;\r\n        case actionList.FETCH.FAIL:\r\n            draft.isProgress = false;\r\n            draft.errors = action.errors;\r\n            break;\r\n    }\r\n};\r\n\r\n\r\nexport const baseActions = (containerName, extra = []) => ({\r\n    FETCH: {\r\n      CALL: `app/${containerName}/FETCH`,\r\n      SUCCESS: `app/${containerName}/FETCH_SUCCESS`,\r\n      FAIL: `app/${containerName}/FETCH_FAIL`,\r\n    },\r\n  });\r\n\r\nexport const actionCreator = (name, containerName) => ({\r\n    [name]: {\r\n      CALL: `app/${containerName}/${name}`,\r\n      SUCCESS: `app/${containerName}/${name}_SUCCESS`,\r\n      FAIL: `app/${containerName}/${name}_FAIL`,\r\n    },\r\n})","import {actionCreator, baseActions} from '../../utils/redux/reducer';\r\n\r\nexport const LoginPageContainer = `LoginPageContainer`;\r\n\r\nexport const LOGIN_ACTIONS = {\r\n    ...baseActions(LoginPageContainer),\r\n    ...actionCreator(['AUTH'], LoginPageContainer),\r\n    ...actionCreator(['SELECT_PLATE'], LoginPageContainer),\r\n    ...actionCreator(['LOGIN'], LoginPageContainer),\r\n\r\n};","import { conformsTo, isFunction, isObject } from 'lodash';\r\nimport invariant from 'invariant';\r\n\r\nexport default function checkStore(store) {\r\n    const shape = {\r\n        dispatch: isFunction,\r\n        subscribe: isFunction,\r\n        getState: isFunction,\r\n        replaceReducer: isFunction,\r\n        runSaga: isFunction,\r\n        injectedReducers: isObject,\r\n        injectedSagas: isObject,\r\n    };\r\n    invariant( conformsTo(store, shape), '(app/utils...) injectors: Expected a valid redux store');\r\n} ","export const RESTART_ON_REMOUNT = '@@saga-injector/restart-on-remount';\r\nexport const DAEMON = '@@saga-injector/daemon';\r\nexport const ONCE_TILL_UNMOUNT = '@@saga-injector/once-till-unmount';\r\n","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString, conformsTo } from 'lodash';\r\n\r\nimport checkStore from './checkStore';  \r\nimport { DAEMON, RESTART_ON_REMOUNT, ONCE_TILL_UNMOUNT } from './constants';\r\n\r\nconst allowedModes = [RESTART_ON_REMOUNT, DAEMON, ONCE_TILL_UNMOUNT];\r\n\r\nconst checkKey = key => \r\n    invariant( isString('key') && !isEmpty(key), '(app/utils...) injectSaga: Expected `key` to be a non empty string' );\r\n\r\nconst checkDescriptor = descriptor => {\r\n    const shape = {\r\n        saga: isFunction,\r\n        mode: mode => isString(mode) && allowedModes.includes(mode),\r\n    }\r\n    invariant(conformsTo(descriptor, shape), '(app/utils...) injectSaga: Expected `key` to be a non empty string');\r\n}\r\n\r\nexport function injectSagaFactory(store, isValid) {\r\n    return function injectSaga(key, descriptor = {}, args) {\r\n        if (!isValid) checkStore(store);\r\n\r\n        const newDescriptor = {\r\n            ...descriptor, \r\n            mode: descriptor.mode || DAEMON,\r\n        }\r\n        const { saga, mode } = newDescriptor;\r\n\r\n        checkKey(key);\r\n        checkDescriptor(newDescriptor);\r\n\r\n        let hasSaga = Reflect.has(store.injectedSagas, key);\r\n\r\n        if (process.env.NODE_ENV !== 'production') {\r\n            const oldDescriptor = store.injectedSagas[key];\r\n            if (hasSaga && oldDescriptor.saga !== saga) {\r\n                oldDescriptor.task.cancel();\r\n                hasSaga = false;\r\n            }\r\n        }\r\n\r\n        if (!hasSaga || (hasSaga && mode !== DAEMON && mode !== ONCE_TILL_UNMOUNT)) {\r\n            /* eslint-disable no-param-reassign */\r\n            store.injectedSagas[key] = {\r\n                ...newDescriptor, \r\n                task: store.runSaga(saga, args)\r\n            };\r\n            /* eslint-enable no-param-reassign */\r\n        }\r\n    }\r\n}\r\n\r\nexport function ejectSagaFactory(store, isValid) {\r\n    return function ejectSaga(key) {\r\n        if (!isValid) checkStore(store);\r\n        \r\n        checkKey(key);\r\n\r\n        if (Reflect.has( store.injectedSagas, key )) {\r\n            const descriptor = store.injectedSagas[key];\r\n            if (descriptor.mode && descriptor.mode !== DAEMON) {\r\n                descriptor.task.cancel();\r\n                if (process.env.NODE_ENV === 'production') {\r\n                    store.injectedSagas[key] = 'done';\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n    checkStore(store);\r\n\r\n    return {\r\n        injectSaga: injectSagaFactory(store, true),\r\n        ejectSaga: ejectSagaFactory(store, true)\r\n    }\r\n}","import React, { useContext, useEffect, Component } from 'react';\r\nimport { ForkEffect } from 'redux-saga/effects';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './sagaInjectors';\r\n\r\nexport default ({ key, saga, mode }) => (WrappedComponent) => {\r\n    class InjectSaga extends Component {\r\n        static WrappedComponent = WrappedComponent;\r\n\r\n        static contextType = ReactReduxContext;\r\n\r\n        static displayNode = `withSaga(${ WrappedComponent.displayName || WrappedComponent.name || 'Component' })`;\r\n\r\n        constructor(props, context) {\r\n            super(props, context);\r\n\r\n            this.injectors = getInjectors(context.store);\r\n\r\n            this.injectors.injectSaga(key, {saga, mode}, this.props);\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            this.injectors.ejectSaga(key);\r\n        }\r\n\r\n        render() {\r\n            return <WrappedComponent {...this.props} />;\r\n        }\r\n    }\r\n\r\n    return hoistNonReactStatics(InjectSaga, WrappedComponent);\r\n}\r\n\r\nconst useInjectSaga = ({ key, saga, mode }) => {\r\n    const context = useContext(ReactReduxContext);\r\n    useEffect( () => {\r\n        const injectors = getInjectors(context.store);\r\n        injectors.injectSaga(key, { saga, mode });\r\n\r\n        return () => {\r\n            injectors.ejectSaga(key);\r\n        }\r\n    }, [])\r\n};\r\n\r\nexport { useInjectSaga };","import invariant from 'invariant';\r\nimport { isEmpty, isFunction, isString } from 'lodash';\r\n\r\nimport checkStore from './checkStore';\r\nimport createReducer from '../reducers';\r\n\r\nexport function injectReducerFactory(store, isValid) {\r\n    return function injectReducer(key, reducer) {\r\n        if (!isValid) checkStore(store);\r\n        \r\n        invariant(\r\n            isString(key) && !isEmpty(key) && isFunction(reducer),\r\n            '(app/utils...) injectReducer: Expected `reducer` to be a reducer function',\r\n        )\r\n\r\n        if (Reflect.has( store.injectedReducers, key ) && store.injectedReducers[key] === reducer) return;\r\n        \r\n        store.injectedReducers[key] = reducer;\r\n        store.replaceReducer(createReducer(store.injectedReducers));\r\n    }\r\n}\r\n\r\nexport default function getInjectors(store) {\r\n    checkStore(store);\r\n    return {\r\n        injectReducer: injectReducerFactory(store, true)\r\n    }\r\n}","import React, {useContext, useEffect} from 'react';\r\nimport hoistNonReactStatics from 'hoist-non-react-statics';\r\nimport { ReactReduxContext } from 'react-redux';\r\n\r\nimport getInjectors from './reducerInjectors';\r\n\r\nexport default ({ key, reducer }) => WrappedComponent => {\r\n    class ReducerInjector extends React.Component {\r\n        static WrappedComponent = WrappedComponent;\r\n\r\n        static contextType = ReactReduxContext;\r\n\r\n        static displayName = `withReducer(${WrappedComponent.displayName || WrappedComponent.name || 'Component'})`;\r\n\r\n        constructor(props, context) {\r\n            super(props, context);\r\n\r\n            \r\n            getInjectors(context.store).injectReducer(key, reducer);\r\n        }\r\n\r\n        render() {\r\n            return <WrappedComponent {...this.props} />\r\n        }\r\n    }\r\n\r\n    return hoistNonReactStatics(ReducerInjector, WrappedComponent);\r\n}\r\n\r\nconst useInjectReducer = ({ key, reducer }) => {\r\n    const context = useContext(ReactReduxContext);\r\n    useEffect( () => {\r\n        getInjectors(context.store).injectReducer(key, reducer);\r\n    }, [])\r\n}\r\n\r\nexport { useInjectReducer };","export default function request(url, options) {\r\n    return new Promise( (resolve, reject) => {\r\n        fetch(url, options)\r\n        .then( res => {\r\n            return res.json()\r\n         } )\r\n        .then( response => {\r\n            return resolve(response);\r\n        })\r\n        .catch(() => reject(new Error('Network Error')));\r\n    });\r\n}","import {LOGIN_ACTIONS} from './constants';\r\n\r\nexport function loginAction(user) {\r\n    return {\r\n        type: LOGIN_ACTIONS.AUTH.CALL,\r\n        user: user\r\n    }\r\n}\r\n\r\nexport function loginSuccessAction(res, user) {\r\n    return {\r\n        type: LOGIN_ACTIONS.AUTH.SUCCESS,\r\n        res,\r\n        user\r\n    }\r\n}\r\n\r\nexport function loginFailAction(err) {\r\n    return {\r\n        type: LOGIN_ACTIONS.AUTH.FAIL,\r\n        err\r\n    }\r\n}\r\n\r\nexport function selectPlate(plate) {\r\n    return {\r\n        type: LOGIN_ACTIONS.SELECT_PLATE.CALL,\r\n        plate\r\n    }\r\n}\r\n\r\nexport function select4Plate(user, plate) {\r\n    return {\r\n        type: LOGIN_ACTIONS.SELECT_PLATE.SUCCESS,\r\n        user,\r\n        plate\r\n    }\r\n}\r\n\r\nexport function authAction() {\r\n    return {\r\n        type: LOGIN_ACTIONS.LOGIN.CALL,\r\n    }\r\n}\r\n\r\nexport function authFailAction() {\r\n    return {\r\n        type: LOGIN_ACTIONS.LOGIN.FAIL,\r\n    }\r\n}","import { call, put, select, takeEvery } from 'redux-saga/effects';\r\nimport {LOGIN_ACTIONS} from './constants';\r\nimport request from '../../utils/request';\r\n\r\nimport { loginSuccessAction, authAction, authFailAction } from './actions';\r\n\r\nconst requestAPI = `194.67.110.56:5000`\r\n\r\nfunction* loginSaga(action) {\r\n    const requestURL = `http://${requestAPI}/api/auth/step_1`\r\n    const options = {\r\n        method: 'post',\r\n        mode: 'cors',\r\n        body: JSON.stringify({\r\n            \"user\": action.user\r\n        })\r\n    }\r\n    try {\r\n        \r\n        const res = yield call( request, requestURL, options );\r\n        if (res.squares) {\r\n            yield put( loginSuccessAction(res, action.user) );\r\n        }\r\n    } catch(err) {\r\n        console.log(err)\r\n    }\r\n}\r\n\r\nfunction* postPlates(action) {\r\n    const requestURL = `http://${requestAPI}/api/auth/step_2`;\r\n    const options = {\r\n        method: 'post',\r\n        mode: 'cors',\r\n        body: JSON.stringify({\r\n            user: action.user,\r\n            squares: action.plate\r\n        })\r\n    }\r\n    try {\r\n        const res = yield call( request, requestURL, options );\r\n        console.log(res);\r\n        yield put( authAction() )\r\n    } catch(err) {\r\n        yield put( authAction() )\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\nexport default function* authSaga() {\r\n    yield takeEvery(LOGIN_ACTIONS.AUTH.CALL, loginSaga);\r\n    yield takeEvery(LOGIN_ACTIONS.SELECT_PLATE.SUCCESS, postPlates);\r\n}\r\n  ","import produce from 'immer';\r\nimport { baseReducer, baseState } from '../../utils/redux/reducer';\r\nimport { LOGIN_ACTIONS } from './constants';\r\n\r\nexport const initialState = Object.assign(\r\n  {},\r\n  {\r\n    ...baseState,\r\n    user: '',\r\n    squares: [],\r\n    selectedSquare: [],\r\n    isAuth: false,\r\n  },\r\n);\r\n\r\nconst togglePlates = (draft, plate) => {\r\n  const index = draft.selectedSquare.indexOf(plate);\r\n  if (index === -1) {\r\n    return draft.selectedSquare.concat( [plate] );\r\n  } else {\r\n    return draft.selectedSquare.splice( index, 1 );\r\n  }\r\n}\r\n\r\n/* eslint-disable default-case, no-param-reassign */\r\nconst reducer = (state = initialState, action) =>\r\n  produce(state, draft => {\r\n    switch (action.type) {\r\n      case LOGIN_ACTIONS.AUTH.SUCCESS:\r\n        draft.squares = action.res.squares;\r\n        draft.user = action.user;\r\n        break;\r\n      case LOGIN_ACTIONS.SELECT_PLATE.CALL:\r\n        draft.selectedSquare = togglePlates(draft, action.plate);\r\n        break;\r\n      case LOGIN_ACTIONS.LOGIN.CALL:\r\n        draft.isAuth = true;\r\n        break;\r\n      case LOGIN_ACTIONS.LOGIN.FAIL:\r\n        draft.isAuth = false;\r\n        draft.squares = [];\r\n        break;\r\n      default:\r\n        baseReducer({ draft, state, action, initialState, actionList: LOGIN_ACTIONS });\r\n    }\r\n  });\r\n\r\nexport default reducer;","import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nconst useStyles = makeStyles({\r\n    plate: {\r\n        background: ({color}) => `${color}`,\r\n        width: 150,\r\n        height: 150,\r\n        opacity: ({ isSelect }) => isSelect ? 1 : 0.5,\r\n    },\r\n    number: {\r\n        color: 'white',\r\n        fontSize: 30,\r\n        textAlign: 'center',\r\n    }\r\n})\r\n\r\nconst Square = (props) => {\r\n    const [ isSelect, setIsSelect ] = useState();\r\n    \r\n    const classes = useStyles({ color: props.color, isSelect: isSelect });\r\n\r\n    const handleOnClick = () => {\r\n        props.onSelectPlate(props.square);\r\n        setIsSelect(!isSelect);\r\n    }\r\n    \r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" className={classes.plate} onClick={handleOnClick}>\r\n            <Grid item className={classes.number}>\r\n                {props.number}\r\n            </Grid>\r\n        </Grid>\r\n    );\r\n\r\n}\r\n\r\nexport default Square","import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Square from '../../components/Square'\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport {withRouter} from 'react-router';\r\n\r\nconst useStyles = makeStyles({\r\n    container: {    \r\n        maxWidth: 450,\r\n        margin: 'auto',\r\n        height: '100vh',\r\n    },\r\n    block: {\r\n        width: '100%',\r\n        height: 450,\r\n        background: \"#f9f9f9\",\r\n        position: 'relative',\r\n        borderRadius: 15,\r\n    },\r\n    button: {\r\n        width: 160,\r\n        height: 50,\r\n        marginTop: 41,\r\n        background: '#7FA6E1',\r\n        borderRadius: 15,\r\n        color: 'white',\r\n        fontSize: 15,\r\n        lineHeight: '32px',\r\n        padding: '5px 30px',\r\n    },\r\n})\r\n\r\nconst AuthSecondStep = (props) => {\r\n    const classes = useStyles();\r\n    \r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" className={classes.container}>\r\n            <Grid className={classes.block} container>\r\n                {\r\n                    props.squares.map( square => <Square square={square} onSelectPlate={props.onSelectPlate} key={`${square[0]}${square[1]}`} color={square[0]} number={square[1]}/>)\r\n                }\r\n            </Grid>\r\n\r\n            <Button className={classes.button} onClick={ props.onClick }>Далее</Button>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default withRouter(AuthSecondStep);","import { createSelector } from 'reselect';\r\nimport { initialState } from './reducer';\r\nimport { LoginPageContainer } from './constants';\r\n\r\nconst selectLoginDomain = state => {\r\n    return state[LoginPageContainer] || initialState;\r\n}\r\n\r\nconst makeSelectSquares = () => \r\n    createSelector( \r\n        selectLoginDomain,\r\n        substate => substate.squares\r\n    )\r\n\r\nconst makeSelectSelectedSquares = () => \r\n    createSelector( \r\n        selectLoginDomain,\r\n        substate => substate.selectedSquare\r\n    )\r\n\r\nconst makeSelectUser = () => \r\n    createSelector( \r\n        selectLoginDomain,\r\n        substate => substate.user\r\n    )\r\n\r\nconst makeSelectIsAuth = () => \r\n    createSelector( \r\n        selectLoginDomain,\r\n        substate => substate.isAuth\r\n    )\r\n\r\nexport { makeSelectSquares, makeSelectSelectedSquares, makeSelectUser, makeSelectIsAuth };\r\n","import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport { LoginPageContainer } from './constants';\r\n\r\nimport injectSaga from '../../utils/injectSaga';\r\nimport injectReducer from '../../utils/injectReducer';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport saga from './saga';\r\n\r\nimport mapDispatchToProps from '../../utils/mapDispatchToProps';\r\n\r\nimport { loginAction, select4Plate, selectPlate, authFailAction } from './actions';\r\n\r\nimport appImage from './app_image.png';\r\n\r\nimport reducer from './reducer';\r\n\r\nimport AuthSecondStep from '../AuthSecondStep';\r\n\r\nimport { makeSelectSquares, makeSelectUser, makeSelectSelectedSquares, makeSelectIsAuth } from './selector'\r\n\r\nimport { createStructuredSelector } from 'reselect';\r\n\r\nimport {withRouter} from 'react-router';\r\n\r\nimport Client from '../Client/Loadable';\r\n\r\nconst useStyles = makeStyles({\r\n    container: {    \r\n        maxWidth: 1080,\r\n        margin: 'auto',\r\n        height: '100vh',\r\n    },\r\n    block: {\r\n        width: '100%',\r\n        height: '638px',\r\n        background: \"#f9f9f9\",\r\n        position: 'relative',\r\n        borderRadius: 15,\r\n    },\r\n    inputContainer: {\r\n        padding: 80,\r\n    },\r\n    inputContainerText: {\r\n        fontWeight: 'normal',\r\n        fontSize: '48px',\r\n        lineHeight: '50px',\r\n        textAlign: 'center',\r\n        color: '#000000',\r\n        marginBottom: 50,\r\n    },\r\n    input: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        width: 160,\r\n        height: 50,\r\n        marginTop: 41,\r\n        background: '#7FA6E1',\r\n        borderRadius: 15,\r\n        color: 'white',\r\n        fontSize: 15,\r\n        lineHeight: '32px',\r\n        padding: '5px 30px',\r\n    },\r\n    image: {\r\n        display: 'none',\r\n    },\r\n    [\"@media (min-width: 1280px)\"]: {\r\n        image: {\r\n            position: 'absolute',\r\n            bottom: 10,\r\n            right: 10,\r\n            border: '10px solid #7FA6E1',\r\n            borderRadius: 15,\r\n            borderBottom: 10,\r\n            borderRight: 10,\r\n            display: 'block'\r\n        }\r\n    }\r\n})\r\n\r\nconst LoginPage = (props) => {\r\n    const classes = useStyles();\r\n    const [ inputValue, setInputValue ] = useState('');\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleAuth = () => {\r\n        props.dispatch( loginAction(inputValue) );\r\n    };\r\n\r\n    const handleSelectPlate = (plate) => {\r\n        props.dispatch( selectPlate(plate) );\r\n    }\r\n    \r\n    const handleOnClick = () => {\r\n        props.dispatch( select4Plate(props.user, props.selectedSquares) )\r\n    }\r\n\r\n    const handleLogOut = () => {\r\n        props.dispatch( authFailAction() )\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Client onClick={handleLogOut}/>\r\n    }\r\n\r\n    if (props.squares.length !== 0) {\r\n        return (\r\n            <AuthSecondStep onClick={ handleOnClick } squares={props.squares} onSelectPlate={handleSelectPlate}/>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <Grid container direction=\"column\" justify=\"center\" className={classes.container}>\r\n            <Grid className={classes.block} container>\r\n                <Grid \r\n                    lg={6} \r\n                    md={12} \r\n                    item\r\n                    container \r\n                    direction=\"column\"  \r\n                    justify=\"center\"  \r\n                    alignItems=\"center\" \r\n                    className={ classes.inputContainer }\r\n                >\r\n                    <Grid className={classes.inputContainerText}>Вход в ВТБ-Онлайн</Grid>\r\n                    <TextField \r\n                        variant=\"outlined\" \r\n                        className={classes.input} \r\n                        name=\"user\" \r\n                        onChange={handleInputChange} \r\n                        label=\"Номер карты и логин\"\r\n                        value={inputValue}\r\n                    />\r\n                    <Button onClick={ handleAuth } className={classes.button}>Далее</Button>\r\n                </Grid>\r\n                <Grid \r\n                    item\r\n                    lg={6}\r\n                    container\r\n                    direction=\"column\"\r\n                    justify=\"center\"\r\n                    alignItems=\"center\"\r\n                    className={ classes.inputContainer }\r\n                >\r\n                    <img src={appImage} className={ classes.image }/>\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n    squares: makeSelectSquares(),\r\n    selectedSquares: makeSelectSelectedSquares(),\r\n    user: makeSelectUser(),\r\n    isAuth: makeSelectIsAuth(),\r\n});\r\n\r\nconst withConnect = connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps,\r\n);\r\n\r\nconst withSaga = injectSaga({ key: LoginPageContainer, saga });\r\nconst withReducer = injectReducer({ key: LoginPageContainer, reducer });\r\n\r\nexport default compose(\r\n    withRouter,\r\n    withConnect,\r\n    withSaga,\r\n    withReducer\r\n)(LoginPage);","export default function mapDispatchToProps(dispatch) {\r\n    return {\r\n      dispatch,\r\n    };\r\n  }\r\n  "],"sourceRoot":""}